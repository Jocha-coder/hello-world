TEST_CLASS(UnitTest1)
	{
	public:
		
		TEST_METHOD(TestMethod1)
		{
			int a[3] = { -1,-1,-1 };
			int sum = 0;
			int s = 0;
			for (int i = 0; i < 3; i++)
			{
				if (s + a[i] > 0 && s + a[i] > sum)
				{
					s = s + a[i];
					sum = s;
				}
				else if (s + a[i] < s && s + a[i]>0)
				{
					s = s + a[i];
				}
				else
				{
					s = 0;
				}
			}
			int right = 0;
			Assert::AreEqual(right, sum);
		}
		TEST_METHOD(TestMethod2)
		{
			int a[4] = { 2,0,-5,-6 };
			int sum = 0;
			int s = 0;
			for (int i = 0; i < 4; i++)
			{
				if (s + a[i] > 0 && s + a[i] > sum)
				{
					s = s + a[i];
					sum = s;
				}
				else if (s + a[i] < s && s + a[i]>0)
				{
					s = s + a[i];
				}
				else
				{
					s = 0;
				}
			}
			int right = 2;
			Assert::AreEqual(right, sum);
		}

		TEST_METHOD(TestMethod3)
		{
			int a[5] = {1,2,3,4,5};
			int sum = 0;
			int s = 0;
			for (int i = 0; i < 5; i++)
			{
				if (s + a[i] > 0 && s + a[i] > sum)
				{
					s = s + a[i];
					sum = s;
				}
				else if (s + a[i] < s && s + a[i]>0)
				{
					s = s + a[i];
				}
				else
				{
					s = 0;
				}
			}
			int right = 15;
			Assert::AreEqual(right, sum);
		}
	};
